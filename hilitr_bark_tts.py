# -*- coding: utf-8 -*-
"""HiLitR_Bark_TTS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sMt4vrf2UjUbKk-KDbB4Zqn_8wCsTzxL
"""

# Commented out IPython magic to ensure Python compatibility.
from getpass import getpass

# Prompt for GitHub PAT (do this securely)
token = getpass("Enter your GitHub token: ")

# Clone using HTTPS + token
!git clone https://{token}@github.com/mikedouzinas/HiLitR.git
# %cd HiLitR



import numpy as np
print(np.__version__)

!pip install torch==2.5.0 torchvision torchaudio --force-reinstall

!pip install numpy==1.26.4 --force-reinstall

import numpy as np
print(np.__version__)

!pip install git+https://github.com/suno-ai/bark.git
!pip install librosa soundfile scipy numpy moviepy

from bark import generate_audio, SAMPLE_RATE

import sys
sys.path.append("/content/HiLitR")

from bark_repo.bark_pipeline import generate_bark_audio
text = (
      "What an electrifying moment in the early stages of this match! The attacking team was weaving their way through the middle third, showcasing some intricate passing and clever dribbling. They seemed to be building momentum, but as the striker made a darting run behind the defense, the flag went up\u2014offside! It\u2019s a tough call, as he was just a fraction ahead of the last defender, clearly looking to capitalize on a perfectly timed pass. This could have been a golden opportunity to take the lead, but now they\u2019ll have to regroup and find that rhythm again!"
      )

generate_bark_audio(text, "commentary.wav")

from google.colab import drive
drive.mount('/content/drive')

folder_path = "/content/drive/MyDrive/outputs"

import json
import os
from moviepy.editor import VideoFileClip, AudioFileClip
from bark_repo.bark_pipeline import generate_bark_audio
from pathlib import Path

# Constants
SKIP_LABELS = {
    "Ball out of play", "Foul",
    "Throw-in", "Clearance"
}

# Paths
manifest_path = "/content/drive/MyDrive/outputs/final/highlights_1746065654_manifest.json"
with_audio_dir = "/content/drive/MyDrive/outputs/final/with_audio_1"
os.makedirs(with_audio_dir, exist_ok=True)

# Load manifest
with open(manifest_path) as f:
    clips = json.load(f)

processed = 0
for i, clip in enumerate(clips, start=1):
    label = clip["label"]
    commentary = clip.get("commentary", "")
    raw_clip_path = f"/content/drive/MyDrive/{clip['clip_path']}"

    if label in SKIP_LABELS:
        print(f"‚è© Skipping (label): {label}")
        continue
    if len(commentary) < 100:
        print(f"‚è© Skipping (short commentary): {label} @ {clip['gameTime']}")
        continue
    if not os.path.exists(raw_clip_path):
        print(f"‚è© Skipping (missing clip): {raw_clip_path}")
        continue

    print(f"üîä Processing clip {i}: {label} @ {clip['gameTime']}")

    # Paths for audio and output
    bark_audio_path = f"/content/commentary_{i}.wav"
    output_video_path = f"{with_audio_dir}/clip_{i:03}_with_audio_1.mp4"

    # 1. Generate Bark TTS audio
    generate_bark_audio(commentary, bark_audio_path)

    # 2. Load and mute video, overlay audio
    video = VideoFileClip(raw_clip_path).without_audio()
    audio = AudioFileClip(bark_audio_path)

    # 3. Set new audio and export
    min_duration = min(video.duration, audio.duration)
    final_clip = video.subclip(0, min_duration).set_audio(audio.subclip(0, min_duration))

    final_clip.write_videofile(output_video_path, codec="libx264", audio_codec="aac")

    # Optional cleanup
    os.remove(bark_audio_path)
    processed += 1

print(f"Done! {processed} clips processed with Bark commentary.")



from moviepy.editor import VideoFileClip, concatenate_videoclips, ColorClip, AudioFileClip
from pathlib import Path
import re

# Folder with final clips
clips_dir = Path("/content/drive/MyDrive/outputs/final/with_audio_1")
clip_paths = sorted(clips_dir.glob("clip_*_with_audio_1.mp4"),
                    key=lambda p: int(re.search(r"clip_(\d+)_", p.name).group(1)))

# Parameters
fade_duration = 0.5   # fade in/out duration
pause_duration = 0.7    # silence and black screen between clips

clips = []
for path in clip_paths:
    print(f"Loading {path.name}")
    clip = VideoFileClip(str(path)).fadein(fade_duration).fadeout(fade_duration)

    # Create a black silent clip with same size
    black_clip = ColorClip(size=clip.size, color=(0, 0, 0), duration=pause_duration)
    black_clip = black_clip.set_audio(AudioFileClip(clip.audio.filename).subclip(0, 0))  # silence

    clips.extend([clip, black_clip])  # add both clip and pause

# Remove the last black clip to avoid extra silence at the end
if clips:
    clips.pop()

# Concatenate all clips
final_video = concatenate_videoclips(clips, method="compose")

# Output path
output_path = "/content/drive/MyDrive/outputs/final/highlights_with_transitions_and_pauses.mp4"
final_video.write_videofile(output_path, codec="libx264", audio_codec="aac")

print(f"\n Final video saved to: {output_path}")

from google.colab import drive
import os

# Step 1: Mount Google Drive
drive.mount('/content/drive')

# Step 2: Define base output directory
base_dir = "/content/drive/MyDrive/colab_outputs"
clips_dir = os.path.join(base_dir, "clips")
audio_dir = os.path.join(base_dir, "audio")
final_dir = os.path.join(base_dir, "final")

# Step 3: Create directories if they don't exist
for d in [clips_dir, audio_dir, final_dir]:
    os.makedirs(d, exist_ok=True)

print(" Drive mounted and folders created:")
print(f"- Clips: {clips_dir}")
print(f"- Audio: {audio_dir}")
print(f"- Final videos: {final_dir}")

import shutil

# Define source and destination paths
shutil.copytree("/content/drive/MyDrive/outputs/final", "/content/drive/MyDrive/colab_outputs/final", dirs_exist_ok=True)
shutil.copytree("/content/drive/MyDrive/outputs/audio", "/content/drive/MyDrive/colab_outputs/audio", dirs_exist_ok=True)
shutil.copytree("/content/drive/MyDrive/outputs/clips", "/content/drive/MyDrive/colab_outputs/clips", dirs_exist_ok=True)
